{"version":3,"file":"main.442e35e089c61c03afeb.js","mappings":"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","sources":["webpack://12_todolist/./src/dataModels/project.js","webpack://12_todolist/./src/dataModels/projectList.js","webpack://12_todolist/./src/view.js","webpack://12_todolist/./node_modules/date-fns/isDate.js","webpack://12_todolist/./node_modules/date-fns/constants.js","webpack://12_todolist/./node_modules/date-fns/constructFrom.js","webpack://12_todolist/./node_modules/date-fns/toDate.js","webpack://12_todolist/./node_modules/date-fns/isValid.js","webpack://12_todolist/./src/dataModels/todo.js","webpack://12_todolist/./src/controller.js"],"sourcesContent":["\nimport Todo from './todo.js';\n\n/* Magic Values */\nconst TITLE_MAX_LENGTH = 64;\nconst TITLE_LENGTH_ERROR = \"Invalid Title (Must be <= 64 characters)\";\n\nexport default class Project {\n\n    /* Constructor */\n\n    constructor({title = \"\", todoList = []}){\n        this.id = crypto.randomUUID();\n        if (title.length > TITLE_MAX_LENGTH) { \n            throw new Error(TITLE_LENGTH_ERROR);\n        }\n        this.title = title;\n        this.todoList = todoList; \n    }\n\n    /* Methods */\n\n    updateTitle(newTitle){\n        if(newTitle.length > TITLE_MAX_LENGTH) {\n            throw new Error(TITLE_LENGTH_ERROR)\n        }\n        this.title = newTitle;\n    }\n\n    addTodo(todoItem){\n        this.todoList.push(todoItem);\n    }\n\n    removeTodo(todoID){\n        const removeIndex = this.todoList.indexOf(todoID);\n        this.todoList.splice(removeIndex, 1);\n    }\n\n}","\nimport Project from './project.js'\n\nexport default class ProjectList {\n\n    /* Constructor */\n\n    constructor(projects = []){\n        const generalProject = new Project({title: \"General\"});\n        this.projects = projects\n        this.projects.unshift(generalProject);\n    }\n\n    /* Methods */\n\n    addProject(newProject){\n        this.projects.push(newProject);\n    }\n\n    removeProject(projectID){\n        const indexToRemove = this.projects.findIndex(project => project.id === projectID);\n        if (indexToRemove > -1){\n            this.projects.splice(indexToRemove, 1);\n        }\n    } \n\n}\n\nconst proj = new ProjectList([]);","\nimport Todo from './dataModels/todo.js';\nimport Project from './dataModels/project.js';\nimport ProjectList from './dataModels/projectList.js';\n\nexport function renderSideBar(projectArray){\n\n    const projects = document.querySelector(\"#projects\");\n    projects.innerHTML = \"\";\n\n    for (let i = 0; i < projectArray.length; i++){\n\n        const row = document.createElement(\"div\");\n        row.setAttribute(\"id\", projectArray[i].id);\n\n        const projectButton = document.createElement(\"button\");\n        projectButton.textContent = projectArray[i].title;\n        projectButton.setAttribute(\"id\", projectArray[i].id);\n        projectButton.setAttribute(\"class\", \"select-project\");\n        row.appendChild(projectButton);\n\n        if (projectButton.textContent !== \"General\"){\n            const removeButton = document.createElement(\"button\");\n            removeButton.textContent = \"remove\";\n            removeButton.setAttribute(\"id\", projectArray[i].id);\n            removeButton.setAttribute(\"class\", \"remove-project\");\n            row.appendChild(removeButton);\n        }\n\n        projects.appendChild(row);\n\n    }\n\n    const addButton = document.createElement(\"button\");\n    addButton.textContent = \"Add Project\";\n    addButton.setAttribute(\"class\", \"add-project\");\n    projects.appendChild(addButton);\n\n}\n\nexport function renderMain(project){\n\n    const rightSide = document.querySelector(\"#individual-project-right\");\n    rightSide.innerHTML = \"\";\n\n    const projectTitle = document.createElement(\"h1\");\n    projectTitle.textContent = project.title;\n    rightSide.append(projectTitle);\n\n    for (let i = 0; i < project.todoList.length; i++){\n\n        const details = document.createElement(\"details\");\n        details.setAttribute(\"id\", project.todoList[i].id);\n\n        const summary = document.createElement(\"summary\");\n        summary.textContent = project.todoList[i].title + \" (Due:\" + project.todoList[i].due + \")\";\n\n        const divDetails = document.createElement(\"div\");\n        \n        const description = document.createElement(\"p\");\n        description.textContent = \"Description: \" + project.todoList[i].description;\n\n        const priority = document.createElement(\"p\");\n        priority.textContent = \"Priority: \" + project.todoList[i].priority;\n\n        const notes = document.createElement(\"p\");\n        notes.textContent = \"Notes: \" + project.todoList[i].notes;\n\n        const remove = document.createElement(\"button\");\n        remove.textContent = \"Remove\";\n        remove.setAttribute(\"class\", \"delete-todo\");\n\n        divDetails.append(description, priority, notes, remove);\n        details.append(summary, divDetails);\n        rightSide.appendChild(details);\n\n    }\n\n    const addButton = document.createElement(\"button\");\n    addButton.textContent = \"Add Todo\";\n    addButton.setAttribute(\"class\", \"add-todo\");\n    rightSide.append(addButton);\n}","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","\n/* Importing Important Date Functions */\nimport { parseISO, isValid } from 'date-fns';\n\n\n/* Magic Values */\nconst TITLE_MAX_LENGTH = 64;\nconst TITLE_LENGTH_ERROR = \"Invalid Title (Must be <= 64 characters)\";\nconst DESCRIPTION_MAX_LENGTH = 150;\nconst DESCRIPTION_LENGTH_ERROR = \"Invalid Description (Must be <= 150 characters)\";\nconst PRIORITY_INVALID_ERROR = \"Invalid Priority (Chose 'High', 'Medium', or 'Low')\";\nconst NOTE_MAX_LENGTH = 500;\nconst NOTE_LENGTH_ERROR = \"Invalid Note (Must be <= 500 characters)\";\n\n\nexport default class Todo {\n    \n    /* Constructor */\n\n    constructor({title = \"\", description = \"\", due = \"\", priority = \"\", note = \"\", completed = false}){\n\n        this.id = crypto.randomUUID();\n\n        if (title.length > TITLE_MAX_LENGTH) { \n            throw new Error(TITLE_LENGTH_ERROR);\n        }\n        this.title = title;\n\n        if (description.length > DESCRIPTION_MAX_LENGTH) {\n            throw new Error(DESCRIPTION_LENGTH_ERROR);\n        }\n        this.description = description;\n\n        const date = new Date(due);\n        this.due = date;\n\n        if (priority !== \"High\" && priority !== \"Medium\" && priority !== \"Low\"){\n            throw new Error(PRIORITY_INVALID_ERROR);\n        }\n        this.priority = priority;\n\n        if (note.length > NOTE_MAX_LENGTH) {\n            throw new Error(NOTE_LENGTH_ERROR);\n        }\n        this.note = note;\n\n        this.completed = completed;\n\n    }\n\n    /* Methods */\n\n    updateTitle(newTitle){\n        if(newTitle.length > TITLE_MAX_LENGTH) {\n            throw new Error(TITLE_LENGTH_ERROR);\n        }\n        this.title = newTitle;\n    }\n\n    updateDescription(newDescription){\n        if (description.length > DESCRIPTION_MAX_LENGTH) {\n            throw new Error(DESCRIPTION_LENGTH_ERROR);\n        }\n        this.description = newDescription;\n    }\n\n    updateDue(newDate){\n        const date = due.parseISO();\n        if (!isValid(date)){\n            throw new Error(DATE_INVALID_ERROR);\n        }\n        this.due = newDate;\n    }\n\n    updatePriority(newPriority){\n        if (priority !== \"High\" && priority !== \"Medium\" && priority !== \"Low\"){\n            throw new Error(PRIORITY_INVALID_ERROR);\n        }\n        this.priority = newPriority;\n    }\n\n    updateNote(newNote){\n        if (note.length > NOTE_MAX_LENGTH) {\n            throw new Error(NOTE_LENGTH_ERROR);\n        }\n        this.note = newNote;\n    }\n\n    markDone(){\n        this.completed = true;\n    }\n\n    markUndone(){\n        this.completed = false;\n    }\n\n}\n","\nimport Todo from './dataModels/todo.js';\nimport Project from './dataModels/project.js';\nimport ProjectList from './dataModels/projectList.js'\nimport { renderSideBar, renderMain } from './view.js';\n\n/* Creating general project */\nconst generalProjectList = new ProjectList();\n\n/* Grabbing relevant DOM elements */\nconst sidebarElements = document.querySelector(\"#projects\");\nconst mainElements = document.querySelector(\"#individual-project-right\");\n\n/* Function to create opening view of interface */\nexport function init() {\n\n    /* Render Initial View */\n    renderSideBar(generalProjectList.projects);\n    renderMain(generalProjectList.projects[0]);\n\n    /* Add Button Event Listeners */\n    sidebarElements.addEventListener(\"click\", handleSidebarClick);\n    mainElements.addEventListener(\"click\", handleMainClick);\n\n}\n\n/* Function to handle sidebar button clicks (e.g., select project, remove project, add project) */\nexport function handleSidebarClick(e) {\n    const className = e.target.className;\n    const id = e.target.id;\n    if (className === \"select-project\"){\n        selectProject(id);\n    }else if (className === \"remove-project\"){\n        removeProject(id);\n    }else if (className === \"add-project\"){\n        addProject();\n    }\n}\n\n/* Function to handle main button clicks (e.g., remove todo, add todo) */\nexport function handleMainClick(e) {\n    const className = e.target.className;\n    const id = e.target.id;\n    if (className === \"delete-todo\"){\n        deleteTodo(id);\n    }else if (className === \"add-todo\"){\n        addTodo(id);\n    }\n}\n\n/* Subfunctions for above cases */\nexport function selectProject(id){\n    const desiredProject = generalProjectList.projects.find(project => project.id === id);\n    renderMain(desiredProject);\n}\n\nexport function removeProject(id){\n    generalProjectList.removeProject(id);\n    renderSideBar(generalProjectList.projects);\n    renderMain(generalProjectList.projects[0]);\n}\n\nexport function addProject(id){\n    const input = prompt(\"Input your project title\");\n    const newProject = new Project({title: input});\n    generalProjectList.addProject(newProject);\n    renderSideBar(generalProjectList.projects);\n}\n\nexport function deleteTodo(id){\n    const projectTitle = document.querySelector(\"#individual-project-right > h1\");\n    const desiredProject = generalProjectList.projects.find(project => project.title === projectTitle.textContent);\n    desiredProject.removeTodo(id);\n    renderMain(desiredProject);\n}\n\nexport function addTodo(id){\n    const projectTitle = document.querySelector(\"#individual-project-right > h1\");\n    const desiredProject = generalProjectList.projects.find(project => project.title === projectTitle.textContent);\n\n    /* Getting Required Info */\n    const title = prompt(\"Input title\");\n    const description = prompt(\"Input description\");\n    const due = prompt(\"Input Due Date 'Y-M-D'\");\n    const priority = prompt(\"Input Priority (High, Medium, Low)\");\n    const note = prompt(\"Input note\");\n\n    /* Constructing todo */\n    const newTodo = new Todo({title, description, due, priority, note});\n    desiredProject.addTodo(newTodo);\n    renderMain(desiredProject);\n}\n\n/* Adding event listeners to all buttons*/\nfunction addEventListeners() {\n    \n    document.querySelector(\"#projects\")\n        .addEventListener(\"click\", e=> {\n            if (!e.target.matches(\"button\")) return;\n            const className = e.target.className;\n            const id = e.target.id;\n            if (className === \"select-project\"){\n                selectProject(id);\n            }else if (className === \"remove-project\"){\n                removeProject(id);\n            }else if (className === \"add-project\"){\n                addProject();\n            }\n        }\n    );\n\n    document.querySelector(\"#individual-projects-right\")\n        .addEventListener(\"click\", e=> {\n            if (!e.target.matches(\"button\")) return;\n            const className = e.target.className;\n            const id = e.target.id;\n            if (className === \"delete-todo\"){\n                deleteTodo(id);\n            }else if (className === \"add-todo\"){\n                addTodo(id);\n            }\n        }\n    );\n                \n}\n\n\nfunction handleProjectClick(e, projectList) {\n    const targetID = e.target.id;\n    const targetProject = projectList.projects.find(project => project.id === targetID);\n    renderMain(targetProject);\n}\n\n\n\n"],"names":["TITLE_LENGTH_ERROR","Project","constructor","title","todoList","this","id","crypto","randomUUID","length","Error","updateTitle","newTitle","addTodo","todoItem","push","removeTodo","todoID","removeIndex","indexOf","splice","ProjectList","projects","generalProject","unshift","addProject","newProject","removeProject","projectID","indexToRemove","findIndex","project","renderSideBar","projectArray","document","querySelector","innerHTML","i","row","createElement","setAttribute","projectButton","textContent","appendChild","removeButton","addButton","rightSide","projectTitle","append","details","summary","due","divDetails","description","priority","notes","remove","isDate","value","Date","Object","prototype","toString","call","Math","pow","constructFromSymbol","Symbol","for","constructFrom","date","toDate","argument","context","isValid","isNaN","DESCRIPTION_LENGTH_ERROR","PRIORITY_INVALID_ERROR","NOTE_LENGTH_ERROR","Todo","note","completed","updateDescription","newDescription","updateDue","newDate","parseISO","DATE_INVALID_ERROR","updatePriority","newPriority","updateNote","newNote","markDone","markUndone","generalProjectList","sidebarElements","mainElements","handleSidebarClick","e","className","target","selectProject","handleMainClick","deleteTodo","find","input","prompt","desiredProject","newTodo","addEventListener"],"sourceRoot":""}